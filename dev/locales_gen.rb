#!/usr/bin/env ruby
# frozen_string_literal: true

# ruby locales_gen.rb -c locales.yml -i output.yml -t locales.lua.erb

require 'yaml'
require 'optparse'
require 'erb'

# Localization Script Generator
#
# This tool reads a YAML config file and an output YAML file generated by the previous script.
# It generates localization scripts for each localization using an ERB template.
#
# Usage:
#   ruby localization_script_generator.rb -c locales.yml -i output.yml -t template.erb
#
# Options:
#   -c, --config CONFIG    The YAML config file.
#   -i, --input INPUT      The input YAML file (output from the previous script).
#   -t, --template TEMPLATE The ERB template file.
class LocalizationScriptGenerator
  # Initializes the LocalizationScriptGenerator with command-line arguments.
  #
  # @param [Array<String>] args The command-line arguments.
  def initialize(args) # rubocop:disable Metrics/AbcSize, Metrics/MethodLength
    @options = {}
    OptionParser.new do |opts|
      opts.banner = 'Usage: localization_script_generator.rb [options]'

      opts.on('-c', '--config CONFIG', 'YAML config file') do |config|
        @options[:config] = config
      end

      opts.on('-i', '--input INPUT', 'Input YAML file') do |input|
        @options[:input] = input
      end

      opts.on('-t', '--template TEMPLATE', 'ERB template file') do |template|
        @options[:template] = template
      end
    end.parse!(args)

    @config = YAML.load_file(@options[:config])
    @localizations = YAML.load_file(@options[:input])[:localizations]
    @template = File.read(@options[:template])
  end

  # Generates localization scripts for each language.
  #
  # @return [void]
  def generate_scripts
    @localizations.each_value do |translations|
      translations.each_key do |language|
        next if language == 'use'

        is_default = (language == @config[:default])

        erb = ERB.new(@template, trim_mode: '%<>')
        result = erb.result_with_hash(language: language, is_default: is_default, localizations: @localizations)

        File.write("#{language}.lua.gen", result)
      end
    end
  end
end

# Main execution
if __FILE__ == $PROGRAM_NAME
  generator = LocalizationScriptGenerator.new(ARGV)
  generator.generate_scripts
end
